#
#  {{neuronName}}.py
#
#  This file is part of NEST.
#
#  Copyright (C) 2004 The NEST Initiative
#
#  NEST is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 2 of the License, or
#  (at your option) any later version.
#
#  NEST is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with NEST.  If not, see <http://www.gnu.org/licenses/>.
#
#  Generated from NESTML {{ nestml_version }} at time: {{ now }}


import numpy as np

from spinnaker2.neuron_models.application import BaseApplication
from spinnaker2.neuron_models.lif_neuron import LIFApplication
from spinnaker2.coordinates import ByteAddr




class {{neuronName}}Application(LIFApplication):

{%- filter indent(4, False) %}
default_parameters = {
    {%- for parameter in neuron.parameter_value_dict %}
        "{{ parameter }}": {{ neuron.parameter_value_dict[parameter] }},
    {%- endfor %}
}

max_atoms_per_core = 250
splittable = True
recordables = ["spikes", "v", "v_last"]  # TODO: Read this out from NESTML file
# fixed addresses
neuron_params_addr = ByteAddr(0xDC00)
data_spec_addr = ByteAddr(0x10000)  # until 0x10080
log_addr = ByteAddr(0x1B000)
data_spec_max_size = 16  # in words
{%- endfilter %}
{%- filter indent(4, False) %}

def __init__(self):
    app_name =  "{{ neuronName }}"
    BaseApplication.__init__(self, name=app_name)
@classmethod
def convert_lif_neuron_params_to_raw_data(cls, pop_slice):
{#    """#}
{#    convert the lif neuron params to raw data.#}
{##}
{#    In the ARM C program, each neuron has a struct:#}
{#    >>>#}
{#        typedef float REAL;#}
{#        typedef struct neuron_params_t {#}
{#            REAL C_m,#}
{#            REAL tau_m,#}
{#            REAL tau_syn_inh,#}
{#            REAL tau_syn_exc,#}
{#            REAL refr_T,#}
{#            REAL E_L,#}
{#            REAL V_reset,#}
{#            REAL V_th,#}
{#            REAL I_e,#}
{#        } neuron_params_t;#}
{#        neuron_params_t neuron_params_array[N_NEURONS];#}
{#    <<<#}
{##}
{#    returns a list of uint32 representing the raw data to be sent to SpiNNaker2#}
{#    """#}
    ordered_param_names = [
        {%- for parameter in neuron.parameter_value_dict %}
            "{{ parameter }}",
        {%- endfor %}
        ]
    n_params = len(ordered_param_names)
    max_neurons = cls.max_atoms_per_core

    float_array = np.zeros(max_neurons * n_params, dtype=np.float32)
    params = pop_slice.pop.params
    n_neurons = pop_slice.size()
    for i, key in enumerate(ordered_param_names):
        value = params.get(key, cls.default_params[key])
        if np.isscalar(value) or len(value) == 1:  # same value for all
            float_array[i : i + n_params * n_neurons : n_params] = value
        else:  # array like
            assert len(value) == pop_slice.pop.size
            float_array[i : i + n_params * n_neurons : n_params] = value[pop_slice.start : pop_slice.stop]

    # convert to uint32 array and return as list
    raw_data = np.frombuffer(float_array.data, dtype=np.uint32)
    return raw_data.tolist()
    {%- endfilter %}






{#    def __init__(self,#}
{## TODO: Initial values of input ports incorrect#}
{## XXX: need to print default values here?#}
{##}
{#{%- filter indent(16) %}#}
{#{%- for variable_symbol in neuron.get_state_symbols() %}#}
{#{%-     set variable = utils.get_state_variable_by_name(astnode, variable_symbol.get_symbol_name()) %}#}
{#{%-     include "directives_py/ConstructorParameterWithDefault.jinja2"%}#}
{#{%- endfor %}#}
{#{%- endfilter %}#}
{##}
{#{%- filter indent(16) %}#}
{#{%- for variable_symbol in neuron.get_parameter_symbols() %}#}
{#{%-     set variable = utils.get_parameter_variable_by_name(astnode, variable_symbol.get_symbol_name()) %}#}
{#{%-     include "directives_py/ConstructorParameterWithDefault.jinja2"%}#}
{#{%- endfor %}#}
{##}
{#{%- for variable_symbol in neuron.get_spike_input_ports() %}#}
{#{%-   if variable_symbol.get_initial_value() == None %}#}
{#{{variable_symbol.get_symbol_name()}} = 0.0,#}
{#{%-   else %}#}
{#{{variable_symbol.get_symbol_name()}} = {{variable_symbol.get_initial_value()}} ,#}
{#{%-   endif %}#}
{#{%- endfor %}#}
{##}
{#{%- for variable_symbol in neuron.get_continuous_input_ports() %}#}
{#{%-   if variable_symbol.get_initial_value() == None %}#}
{#{{variable_symbol.get_symbol_name()}} = 0.0,#}
{#{%-   else %}#}
{#{{variable_symbol.get_symbol_name()}} = {{variable_symbol.get_initial_value()}} ,#}
{#{%-   endif %}#}
{#{%- endfor %}#}
{#{%- endfilter %}#}
{#                ):#}
{#        timestep = (SpynnakerDataView.get_simulation_time_step_ms())#}
{##}
{#        # compute propagators and other internal parameters#}
{#{%- filter indent(8) %}#}
{#{%- for variable_symbol in neuron.get_internal_symbols() %}#}
{#{%-   set variable = utils.get_internal_variable_by_name(astnode, variable_symbol.get_symbol_name()) %}#}
{#{%-   include "directives_py/MemberInitialization.jinja2" %}#}
{#{%- endfor %}#}
{#{%- endfilter %}#}
{##}
{#        super().__init__({{neuronName}}Impl(#}
{#                 # state:#}
{#{%- for sym in neuron.get_state_symbols() %}#}
{#                {{sym.get_symbol_name()}},#}
{#{%- endfor %}#}

{#                 # parameters:#}
{#{%- for sym in neuron.get_parameter_symbols() %}#}
{#                {{sym.get_symbol_name()}},#}
{#{%- endfor %}#}
{##}
{#                 # input ports:#}
{#{%- for sym in neuron.get_spike_input_ports() %}#}
{#                {{sym.get_symbol_name()}},#}
{#{%- endfor %}#}
{#                 # continuous ports:#}
{#{%- for sym in neuron.get_continuous_input_ports() %}#}
{#                {{sym.get_symbol_name()}},#}
{#{%- endfor %}#}
{#                 # internal variables:#}
{#{%- for sym in neuron.get_internal_symbols() %}#}
{#                {{sym.get_symbol_name()}},#}
{#{%- endfor %}#}
{#                                           ))#}
